---
title: "9-2d-descision-boundary"
author: math4mad
code-fold: true
---

:::{.callout-note title="简介"}
  1. ref: probml page84 figure 2.13
  2. dataset:iris
  3. plots:使用 [`GLMakie:contourf 方法`](https://docs.makie.org/stable/reference/plots/contourf/)

:::

## 1. load package
```{julia}
    import MLJ:fit!,fitted_params
    using GLMakie,MLJ,CSV,DataFrames
```


## 2 process data
### 2.1 import iris datset
```{julia}
iris = load_iris();

#selectrows(iris, 1:3)  |> pretty

iris = DataFrames.DataFrame(iris);
first(iris,5)|>display
y, X = unpack(iris, ==(:target); rng=123);

X=select!(X,3:4)

byCat = iris.target
categ = unique(byCat)
colors = [:orange,:lightgreen,:purple];
```

### 2.2 make  desc boundary data
> 生成决策边界实际是利用训练模型对区间内的每个点都做出预测,利用两个属性的最大值和最小值
> 生成 grid 数据,这是 `test`数据
```{julia}
# grid data
   n1 = n2 = 20
   tx = LinRange(0, 8, 40)
   ty = LinRange(-1, 4, 40)
   X_test = mapreduce(collect, hcat, Iterators.product(tx, ty))
   X_test = MLJ.table(X_test')
```

## 3. Logisitcs model
### 3.1 training  model
```{julia}
   LogisticClassifier = @load LogisticClassifier pkg=MLJLinearModels
   #X, y = make_blobs(centers = 2)
   mach = fit!(machine(LogisticClassifier(), X, y))
   predict(mach, X)
   fitted_params(mach)
   probs=predict(mach, X_test)|>Array #返回分类概率值
   probres=[broadcast(pdf, probs,cat) for cat in categ]
```
```{julia}
function plot_res_contour()
    fig=Figure()
    ax = Axis(fig[1, 1], xlabel="petal-length", ylabel="petal-width", title="2d3class-contour")
    
    
    for (idx,cat) in enumerate(categ)
        indc = findall(x -> x == cat, byCat)
        scatter!(ax,iris[:,3][indc],iris[:,4][indc];color=(colors[idx], 0.8), markersize=probres[idx].*10, strokewidth=1, strokecolor=:black, label="$cat")
        
    end
   fig
end
plot_res_contour()
```





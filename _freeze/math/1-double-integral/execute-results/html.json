{
  "hash": "d962ed95e655c537a5093d8abfd3d702",
  "result": {
    "markdown": "---\ntitle: 1-double integral picture\nformat:\n  html:\n    code-fold: true\n    theme: cosmo\n    fontsize: 1.1em\n    linestretch: 1.7\nexecute:\n  cache: true\n---\n\n:::{.callout-note title=\"二元函数积分示意\"}\n   利用小立方体来近似二元函数曲线下面积\n\n   为了增强效果使用了 [`GLMakie ssao 方法`](https://docs.makie.org/stable/explanations/lighting/)\n\n:::\n\n## 1. load package\n> 配置 `ssao`\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n  using GLMakie\n  GLMakie.activate!(ssao=true)\n  GLMakie.closeall() \n  fig = Figure(resolution = (800, 800))\n  ssao = Makie.SSAO(radius = 5.0, blur = 3)\n  ax = LScene(fig[1, 1], scenekw = (ssao=ssao,),show_axis=false)\n  ax.scene.ssao.bias[] = 0.025\n```\n\n::: {.cell-output .cell-output-display execution_count=173}\n```\n0.025\n```\n:::\n:::\n\n\n## 2  define bio-variate funciton \n\n### 2.1   配置函数\n\n> 1. `make_cubic`: plot 小立方体函数\n> 2.  `mack_z` : 根据传入函数的(x,y)坐标返回值, 即 z坐标值\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n  make_cubic(;x=0,y=0,h,w)=Rect3f(Vec3f(x,y,0), Vec3f(w,w,h))\n\n  function make_z(func)\n   return (x,y)->func(x,y)\n  end\n\n```\n\n::: {.cell-output .cell-output-display execution_count=174}\n```\nmake_z (generic function with 1 method)\n```\n:::\n:::\n\n\n### 2.2  二元函数\n> 不限于此\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nf1(x,y)=ℯ^(−(x^2)−(y^2))\n  f5(x,y)=x^2+y^2\n```\n\n::: {.cell-output .cell-output-display execution_count=175}\n```\nf5 (generic function with 1 method)\n```\n:::\n:::\n\n\n## 3  plot\n> 1. 可以改变 `xs,ys` step的值, 增加后, 立方体会变小\n> 2. `box_width=0.19` 设置比`xs,ys` 的间隔小一点, 留出空隙\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\n    xs=range(-2,2,20)\n    ys=range(-2,2,20) \n    box_width=0.19\n    function plot_double_integ(funcz)\n      local box = [make_cubic(;x=x,y=y,h=funcz(x,y),w=box_width) for x in xs  for y in ys]\n      local zs=  [funcz(x,y) for x in xs , y in ys]\n      for  i in eachindex(box)\n      mesh!(ax, box[i], ssao=true,color=:lightblue)\n      wireframe!(ax, box[i]; color = :black, transparency=true)\n    end\n\n    #wireframe!(ax,xs,ys,zs,color=(:red,0.8),linewidth=1)\n    fig\n  end\n\n  make_z(f1)|>plot_double_integ\n```\n\n::: {.cell-output .cell-output-display execution_count=176}\n![](1-double-integral_files/figure-html/cell-5-output-1.png){}\n:::\n:::\n\n\n```julia\n  二元函数\n  f1(x,y)=ℯ^(−(x^2)−(y^2))\n  f2(x,y)=y^2\n  f3(x,y)=2+2x-y\n  f4(x,y)=x+2y+3\n  f5(x,y)=x^2+y^2\n  f6(x,y)=-f5(x,y)+3\n  f7(x,y)=-f5(x,y)\n  f8(x,y)=ℯ^((x^2)+(y^2))\n  f9(x,y)=sqrt(x^2+y^2)\n```\n\n",
    "supporting": [
      "1-double-integral_files"
    ],
    "filters": [],
    "includes": {}
  }
}